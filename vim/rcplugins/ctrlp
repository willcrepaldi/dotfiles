" Commented due the use of fzf
" " Ctrlp - Vimscript fuzzy file opener

" Plug 'ctrlpvim/ctrlp.vim'

" " Without --hidden, it never finds .travis.yml since it starts with a dot
" let g:ctrlp_user_command = 'ag %s -l --ignore .git --ignore node_modules --hidden --nocolor -g ""'
" " let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']
" let g:ctrlp_use_caching = 0

" " Allow opening mutlipe splits with same file via CtrlP
" let g:ctrlp_switch_buffer = 0

" let g:ctrlp_match_window_bottom = 0
" let g:ctrlp_working_path_mode = 'r'
" let g:ctrlp_match_window_reversed = 0
" let g:ctrlp_mruf_default_order = 1
" let g:ctrlp_max_height = 45
" let g:ctrlp_max_files = 300
" let g:ctrlp_max_depth = 99
" let g:ctrlp_prompt_mappings = {
" \ 'MarkToOpen()':         ['<c-z>', '<c-x>'],
" \ 'PrtExit()':            ['<esc>', '<c-c>', '<c-g>', '<C-@>', '<c-space>'],
" \ }

" function! s:CtrlpTargetedMapping(mapping, directory)
"   execute 'nnoremap <leader>'.a:mapping.' :CtrlP '.a:directory.'<cr>'
" endfunction

" command! -nargs=* MapTargetedCtrlp call <sid>CtrlpTargetedMapping(<f-args>)

" let rails_ctrlp_mappings = {
"       \   'gc': 'app/controllers',
"       \   'gj': 'app/assets/javascripts',
"       \   'gl': 'lib',
"       \   'gm': 'app/models',
"       \   'gs': 'spec',
"       \   'gv': 'app/views',
"       \   'gw': 'app/workers',
"       \   'gh': 'app/helpers',
"       \   'gy': 'app/assets/stylesheets',
"       \   'gf': 'spec/factories',
"       \ }

" for [mapping, directory] in items(rails_ctrlp_mappings)
"   execute 'MapTargetedCtrlp '.mapping.' '.directory
" endfor

" let g:ctrlp_custom_ignore = {
"       \ 'dir':  '\v[\/]\.(git|hg|svn)$\|public$|log\|tmp$',
"       \ 'file': '\v\.(exe|so|dll)$\|\.DS_Store$',
"       \ 'link': 'some_bad_symbolic_links',
"       \ }

" nmap <leader>rf :CtrlP ~/.vim/rcfiles<cr>
" nmap <leader>rp :CtrlP ~/.vim/rcplugins<cr>
" nmap <leader>df :CtrlP ~/.dotfiles/vim<cr>

" " Fuzzy finder through tags
" nnoremap <leader>cpt :CtrlPTag<cr>

" " Fuzzy finder through buffers
" nnoremap <leader>cpb :CtrlPBuffer<cr>

" " vim:ft=vim
